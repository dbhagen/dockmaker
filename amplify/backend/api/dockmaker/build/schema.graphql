type elements {
  id: ID!
  title: String!
  content: String!
  price: Int
  rating: Float
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type userdata {
  id: ID!
  githubAPIKey: String
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  owner: String
}

type project {
  id: ID!
  name: String!
  githubRepo: String
  fileLocation: String
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  owner: String
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelelementsConnection {
  items: [elements]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelelementsFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  content: ModelStringInput
  price: ModelIntInput
  rating: ModelFloatInput
  and: [ModelelementsFilterInput]
  or: [ModelelementsFilterInput]
  not: ModelelementsFilterInput
}

type Query {
  syncElements(filter: ModelelementsFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelelementsConnection
  getElements(id: ID!): elements
  listElementss(filter: ModelelementsFilterInput, limit: Int, nextToken: String): ModelelementsConnection
  syncUserdata(filter: ModeluserdataFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModeluserdataConnection
  getUserdata(id: ID!): userdata
  listUserdatas(filter: ModeluserdataFilterInput, limit: Int, nextToken: String): ModeluserdataConnection
  syncProjects(filter: ModelprojectFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelprojectConnection
  getProject(id: ID!): project
  listProjects(filter: ModelprojectFilterInput, limit: Int, nextToken: String): ModelprojectConnection
}

input CreateElementsInput {
  id: ID
  title: String!
  content: String!
  price: Int
  rating: Float
  _version: Int
}

input UpdateElementsInput {
  id: ID!
  title: String
  content: String
  price: Int
  rating: Float
  _version: Int
}

input DeleteElementsInput {
  id: ID
  _version: Int
}

type Mutation {
  createElements(input: CreateElementsInput!, condition: ModelelementsConditionInput): elements
  updateElements(input: UpdateElementsInput!, condition: ModelelementsConditionInput): elements
  deleteElements(input: DeleteElementsInput!, condition: ModelelementsConditionInput): elements
  createUserdata(input: CreateUserdataInput!, condition: ModeluserdataConditionInput): userdata
  updateUserdata(input: UpdateUserdataInput!, condition: ModeluserdataConditionInput): userdata
  deleteUserdata(input: DeleteUserdataInput!, condition: ModeluserdataConditionInput): userdata
  createProject(input: CreateProjectInput!, condition: ModelprojectConditionInput): project
  updateProject(input: UpdateProjectInput!, condition: ModelprojectConditionInput): project
  deleteProject(input: DeleteProjectInput!, condition: ModelprojectConditionInput): project
}

input ModelelementsConditionInput {
  title: ModelStringInput
  content: ModelStringInput
  price: ModelIntInput
  rating: ModelFloatInput
  and: [ModelelementsConditionInput]
  or: [ModelelementsConditionInput]
  not: ModelelementsConditionInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Subscription {
  onCreateElements: elements @aws_subscribe(mutations: ["createElements"])
  onUpdateElements: elements @aws_subscribe(mutations: ["updateElements"])
  onDeleteElements: elements @aws_subscribe(mutations: ["deleteElements"])
  onCreateUserdata(owner: String): userdata @aws_subscribe(mutations: ["createUserdata"])
  onUpdateUserdata(owner: String): userdata @aws_subscribe(mutations: ["updateUserdata"])
  onDeleteUserdata(owner: String): userdata @aws_subscribe(mutations: ["deleteUserdata"])
  onCreateProject(owner: String): project @aws_subscribe(mutations: ["createProject"])
  onUpdateProject(owner: String): project @aws_subscribe(mutations: ["updateProject"])
  onDeleteProject(owner: String): project @aws_subscribe(mutations: ["deleteProject"])
}

type ModeluserdataConnection {
  items: [userdata]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModeluserdataFilterInput {
  id: ModelIDInput
  githubAPIKey: ModelStringInput
  and: [ModeluserdataFilterInput]
  or: [ModeluserdataFilterInput]
  not: ModeluserdataFilterInput
}

input CreateUserdataInput {
  id: ID
  githubAPIKey: String
  _version: Int
}

input UpdateUserdataInput {
  id: ID!
  githubAPIKey: String
  _version: Int
}

input DeleteUserdataInput {
  id: ID
  _version: Int
}

input ModeluserdataConditionInput {
  githubAPIKey: ModelStringInput
  and: [ModeluserdataConditionInput]
  or: [ModeluserdataConditionInput]
  not: ModeluserdataConditionInput
}

type ModelprojectConnection {
  items: [project]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelprojectFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  githubRepo: ModelStringInput
  fileLocation: ModelStringInput
  and: [ModelprojectFilterInput]
  or: [ModelprojectFilterInput]
  not: ModelprojectFilterInput
}

input CreateProjectInput {
  id: ID
  name: String!
  githubRepo: String
  fileLocation: String
  _version: Int
}

input UpdateProjectInput {
  id: ID!
  name: String
  githubRepo: String
  fileLocation: String
  _version: Int
}

input DeleteProjectInput {
  id: ID
  _version: Int
}

input ModelprojectConditionInput {
  name: ModelStringInput
  githubRepo: ModelStringInput
  fileLocation: ModelStringInput
  and: [ModelprojectConditionInput]
  or: [ModelprojectConditionInput]
  not: ModelprojectConditionInput
}
